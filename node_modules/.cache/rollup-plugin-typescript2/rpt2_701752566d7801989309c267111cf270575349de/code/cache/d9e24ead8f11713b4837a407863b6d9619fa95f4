{"code":"import { MemoryDB } from '@builderbot/bot';\nimport { Pool } from 'pg';\nclass PostgreSQLAdapter extends MemoryDB {\n    constructor(_credentials) {\n        super();\n        this.listHistory = [];\n        this.credentials = { host: 'localhost', user: '', database: '', password: null, port: 5432 };\n        this.credentials = _credentials;\n        this.init().then();\n    }\n    async init() {\n        try {\n            const pool = new Pool(this.credentials);\n            const db = await pool.connect();\n            this.db = db;\n            console.log('ðŸ†— Successful DB Connection');\n            this.checkTableExistsAndSP();\n            return true;\n        }\n        catch (error) {\n            console.log('Error', error);\n            throw error;\n        }\n    }\n    async getPrevByNumber(from) {\n        const query = `SELECT * FROM public.history WHERE phone = $1 ORDER BY created_at DESC LIMIT 1`;\n        try {\n            const result = await this.db.query(query, [from]);\n            const row = result.rows[0];\n            if (row) {\n                row['refSerialize'] = row.refserialize;\n                delete row.refserialize;\n            }\n            return row;\n        }\n        catch (error) {\n            console.error('Error getting previous entry by number:', error);\n            throw error;\n        }\n    }\n    async save(ctx) {\n        const values = [ctx.ref, ctx.keyword, ctx.answer, ctx.refSerialize, ctx.from, JSON.stringify(ctx.options)];\n        const query = `SELECT save_or_update_history_and_contact($1, $2, $3, $4, $5, $6)`;\n        try {\n            await this.db.query(query, values);\n        }\n        catch (error) {\n            console.error('Error registering history entry:', error);\n            throw error;\n        }\n        this.listHistory.push(ctx);\n    }\n    async getContact(ctx) {\n        const from = ctx.from;\n        const query = `SELECT * FROM public.contact WHERE phone = $1 LIMIT 1`;\n        try {\n            const result = await this.db.query(query, [from]);\n            return result.rows[0];\n        }\n        catch (error) {\n            console.error('Error getting contact by number:', error.message);\n            throw error;\n        }\n    }\n    async saveContact(ctx) {\n        // action: u (Actualiza el valor de ctx.values), a (Agrega). Agrega por defecto.\n        const _contact = await this.getContact(ctx);\n        let jsValues = {};\n        if ((ctx?.action ?? 'a') === 'a') {\n            jsValues = { ..._contact?.values, ...(ctx?.values ?? {}) };\n        }\n        else {\n            jsValues = ctx?.values ?? {};\n        }\n        const values = [ctx.from, JSON.stringify(jsValues)];\n        const query = `SELECT save_or_update_contact($1, $2)`;\n        try {\n            await this.db.query(query, values);\n        }\n        catch (error) {\n            console.error('ðŸš« Error saving or updating contact:', error);\n            throw error;\n        }\n    }\n    async checkTableExistsAndSP() {\n        const contact = `\n            CREATE TABLE IF NOT EXISTS contact (\n                id SERIAL PRIMARY KEY,\n                phone VARCHAR(255) DEFAULT NULL,\n                created_at TIMESTAMP DEFAULT current_timestamp,\n                updated_in TIMESTAMP,\n                last_interaction TIMESTAMP,\n                values JSONB\n            )`;\n        try {\n            await this.db.query(contact);\n        }\n        catch (error) {\n            console.error('ðŸš« Error creating the contact table:', error);\n            throw error;\n        }\n        const history = `\n            CREATE TABLE IF NOT EXISTS history (\n                id SERIAL PRIMARY KEY,\n                ref VARCHAR(255) NOT NULL,\n                keyword VARCHAR(255),\n                answer TEXT NOT NULL,\n                refSerialize TEXT NOT NULL,\n                phone VARCHAR(255) DEFAULT NULL,\n                options JSONB,\n                created_at TIMESTAMP DEFAULT current_timestamp,\n                updated_in TIMESTAMP,\n                contact_id INTEGER REFERENCES contact(id)\n            )`;\n        try {\n            await this.db.query(history);\n        }\n        catch (error) {\n            console.error('ðŸš« Error creating the history table:', error);\n            throw error;\n        }\n        await this.createSP();\n    }\n    async createSP() {\n        const sp_suc = `\n        CREATE OR REPLACE FUNCTION save_or_update_contact(\n            in_phone VARCHAR(255),\n            in_values JSONB\n        )\n        RETURNS VOID AS\n        $$\n        DECLARE\n            contact_cursor refcursor := 'cur_contact';\n            contact_id INT;\n        BEGIN\n            SELECT id INTO contact_id FROM contact WHERE phone = in_phone;\n        \n            IF contact_id IS NULL THEN\n                INSERT INTO contact (phone, \"values\")\n                VALUES (in_phone, in_values);\n            ELSE\n                UPDATE contact SET \"values\" = in_values, updated_in = current_timestamp\n                WHERE id = contact_id;\n            END IF;\n        END;\n        $$ LANGUAGE plpgsql;`;\n        try {\n            await this.db.query(sp_suc);\n        }\n        catch (error) {\n            console.error('ðŸš« Error creating the stored procedure for contact:', error);\n            throw error;\n        }\n        const sp_suhc = `\n        CREATE OR REPLACE FUNCTION save_or_update_history_and_contact(\n            in_ref VARCHAR(255),\n            in_keyword VARCHAR(255),\n            in_answer TEXT,\n            in_refserialize TEXT,\n            in_phone VARCHAR(255),\n            in_options JSONB\n        )\n        RETURNS VOID AS\n        $$\n        DECLARE\n            _contact_id INT;\n        BEGIN\n            SELECT id INTO _contact_id FROM contact WHERE phone = in_phone;\n        \n            IF _contact_id IS NULL THEN\n                INSERT INTO contact (phone)\n                VALUES (in_phone)\n                RETURNING id INTO _contact_id;\n            ELSE\n                UPDATE contact SET last_interaction = current_timestamp WHERE id = _contact_id;\n            END IF;\n        \n            INSERT INTO history (ref, keyword, answer, refserialize, phone, options, contact_id, created_at)\n            VALUES (in_ref, in_keyword, in_answer, in_refserialize, in_phone, in_options, _contact_id, current_timestamp);\n        \n        END;\n        $$ LANGUAGE plpgsql;`;\n        try {\n            await this.db.query(sp_suhc);\n        }\n        catch (error) {\n            console.error('ðŸš« Error creating the stored procedure for history:', error);\n            throw error;\n        }\n    }\n}\nexport { PostgreSQLAdapter };\n","references":["/Users/nikhilsharma/Desktop/builderbot/packages/bot/dist/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/node_modules/.pnpm/@types+pg@8.11.6/node_modules/@types/pg/index.d.ts","/Users/nikhilsharma/Desktop/builderbot/packages/database-postgres/src/types.ts"],"dtsmap":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/database-postgres/node_modules/.cache/rollup-plugin-typescript2/placeholder/postgresAdapter.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"postgresAdapter.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/postgresAdapter.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAA;AAG1C,OAAO,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,SAAS,CAAA;AAEhE,cAAM,iBAAkB,SAAQ,QAAQ;IACpC,EAAE,EAAE,GAAG,CAAA;IACP,WAAW,EAAE,YAAY,EAAE,CAAK;IAChC,WAAW,EAAE,UAAU,CAA4E;gBAEvF,YAAY,EAAE,UAAU;IAM9B,IAAI,IAAI,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;IAcpC,eAAe,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;IAkBhE,IAAI,CAAC,GAAG,EAAE,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC;IAatC,UAAU,CAAC,GAAG,EAAE,YAAY,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC;IAY3D,WAAW,CAAC,GAAG,KAAA,GAAG,OAAO,CAAC,IAAI,CAAC;IAsB/B,qBAAqB,IAAI,OAAO,CAAC,IAAI,CAAC;IAwCtC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC;CAoElC;AAED,OAAO,EAAE,iBAAiB,EAAE,CAAA\"}"},"dts":{"name":"/Users/nikhilsharma/Desktop/builderbot/packages/database-postgres/node_modules/.cache/rollup-plugin-typescript2/placeholder/postgresAdapter.d.ts","writeByteOrderMark":false,"text":"import { MemoryDB } from '@builderbot/bot';\nimport type { Contact, Credential, HistoryEntry } from './types';\ndeclare class PostgreSQLAdapter extends MemoryDB {\n    db: any;\n    listHistory: HistoryEntry[];\n    credentials: Credential;\n    constructor(_credentials: Credential);\n    init(): Promise<boolean | undefined>;\n    getPrevByNumber(from: string): Promise<HistoryEntry | undefined>;\n    save(ctx: HistoryEntry): Promise<void>;\n    getContact(ctx: HistoryEntry): Promise<Contact | undefined>;\n    saveContact(ctx: any): Promise<void>;\n    checkTableExistsAndSP(): Promise<void>;\n    createSP(): Promise<void>;\n}\nexport { PostgreSQLAdapter };\n//# sourceMappingURL=postgresAdapter.d.ts.map"}}
